name: Update EPG

on:
  schedule:
    - cron: "0 4 * * *"  # 05:00 CET / 06:00 CEST
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update_epg:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency:
      group: epg-update
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone iptv-org/epg
        run: |
          set -euxo pipefail
          git clone --depth 1 https://github.com/iptv-org/epg.git
          cd epg
          # ⚠️ Workaround per bug recente: maxConnections = NaN su master → nessuna queue
          # Pinna a commit stabile; se non esiste, ripiega al commit più recente prima del 2025-10-20
          (git fetch --depth 50 origin +refs/heads/master:refs/remotes/origin/master || true)
          (git checkout 9d20d1f || git checkout "$(git rev-list -n 1 --before='2025-10-20' origin/master)")
          git rev-parse --short HEAD

      - name: Set up Node.js (cache npm su epg/)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: epg/package-lock.json

      - name: Install grabber deps
        working-directory: ./epg
        run: npm ci --no-audit --no-fund

      # ============ DEBUG (solo manuale) ============
      - name: DEBUG · Mostra riga WABC in channels.xml
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "Cerco la riga di WABC…"
          grep -n 'xmltv_id="wabc"' channels.xml || true

      - name: DEBUG · Grab WABC via ontvtonight (1 giorno)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          set -euxo pipefail
          cat > debug_wabc_ontv.channels.xml <<'XML'
          <?xml version="1.0" encoding="UTF-8"?>
          <channels>
            <channel site="ontvtonight.com" lang="en" xmltv_id="wabc" site_id="us#69048654/wabc">ABC</channel>
          </channels>
          XML

          pushd epg >/dev/null
          npm run grab --- \
            --channels="${GITHUB_WORKSPACE}/debug_wabc_ontv.channels.xml" \
            --days=1 \
            --maxConnections=1 \
            --timeout=30000 \
            --curl \
            --output="${GITHUB_WORKSPACE}/debug_wabc_ontv.xml"
          popd >/dev/null

          echo "---- SUMMARY (debug_wabc_ontv.xml) ----"
          test -f debug_wabc_ontv.xml || { echo "Manca debug_wabc_ontv.xml"; exit 1; }
          grep -c "<programme " debug_wabc_ontv.xml || true
          tail -n 60 debug_wabc_ontv.xml || true

      - name: DEBUG · Grab WABC via tvinsider (1 giorno, confronto)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          set -euxo pipefail
          cat > debug_wabc_tvi.channels.xml <<'XML'
          <?xml version="1.0" encoding="UTF-8"?>
          <channels>
            <channel site="tvinsider.com" lang="en" xmltv_id="wabc" site_id="abc">ABC</channel>
          </channels>
          XML

          pushd epg >/dev/null
          npm run grab --- \
            --channels="${GITHUB_WORKSPACE}/debug_wabc_tvi.channels.xml" \
            --days=1 \
            --maxConnections=1 \
            --timeout=30000 \
            --curl \
            --output="${GITHUB_WORKSPACE}/debug_wabc_tvi.xml"
          popd >/dev/null

          echo "---- SUMMARY (debug_wabc_tvi.xml) ----"
          test -f debug_wabc_tvi.xml || { echo "Manca debug_wabc_tvi.xml"; exit 1; }
          grep -c "<programme " debug_wabc_tvi.xml || true
          tail -n 60 debug_wabc_tvi.xml || true

      - name: DEBUG · Elenco canali ufficiale · ontvtonight.com (US)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        working-directory: ./epg
        run: |
          set -euxo pipefail
          npm run channels:parse --- \
            --config=./sites/ontvtonight.com/ontvtonight.com.config.js \
            --output=./sites/ontvtonight.com/ontvtonight.com_us.channels.xml \
            --set=country:us

          FILE="sites/ontvtonight.com/ontvtonight.com_us.channels.xml"
          test -f "$FILE" || { echo "Manca $FILE"; exit 1; }

          echo "---- Righe che contengono WABC ----"
          grep -ni -E 'xmltv_id="wabc"|wabc-hdtv|>WABC<' "$FILE" || true

          echo "---- Statistiche ----"
          echo "Channels totali: $(grep -c '<channel ' "$FILE" || true)"
          head -n 5 "$FILE"
          tail -n 5 "$FILE"
      # ============ FINE DEBUG ============

      - name: Grab all EPGs in parallel
        env:
          CHANNEL_OUTPUT_PAIRS: "channels.xml:epg.xml d_channels.xml:d_epg.xml"
        run: |
          set -euxo pipefail
          echo "Pairs: $CHANNEL_OUTPUT_PAIRS"

          pids=()
          names=()

          for pair in $CHANNEL_OUTPUT_PAIRS; do
            CHANNELS_FILE="${pair%%:*}"
            OUTPUT_FILE="${pair##*:}"

            echo ">> Launching grab for $CHANNELS_FILE -> $OUTPUT_FILE"

            (
              pushd epg >/dev/null
              npm run grab --- \
                --channels="${GITHUB_WORKSPACE}/${CHANNELS_FILE}" \
                --days=7 \
                --maxConnections=16 \
                --timeout=15000 \
                --output="${GITHUB_WORKSPACE}/${OUTPUT_FILE}"
              popd >/dev/null

              if [ -f "${OUTPUT_FILE}" ]; then
                echo "---- EPG SUMMARY (${OUTPUT_FILE}) ----"
                channels_count=$(grep -c "<channel" "${OUTPUT_FILE}" || true)
                progs_count=$(grep -c "<programme " "${OUTPUT_FILE}" || true)
                echo "Channels: $channels_count"
                echo "Programmes: $progs_count"
                ls -lh "${OUTPUT_FILE}"
              else
                echo "No ${OUTPUT_FILE} produced."
                exit 1
              fi
            ) &

            pids+=($!)
            names+=("${OUTPUT_FILE}")
          done

          # Wait for all parallel grabs
          fail=0
          for i in "${!pids[@]}"; do
            pid=${pids[$i]}
            name=${names[$i]}
            if wait "$pid"; then
              echo "✔ Completed: ${name}"
            else
              echo "✖ Failed: ${name}"
              fail=1
            fi
          done

          exit $fail

      - name: Commit changes if needed
        run: |
          set -euxo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add *_epg.xml epg.xml d_epg.xml 2>/dev/null || true
          if ! git diff --cached --quiet; then
            git commit -m "EPG Updated! 📺"
            git push
          else
            echo "No EPG changes to commit."
          fi