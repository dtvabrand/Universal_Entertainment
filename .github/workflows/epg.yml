name: Update EPG

on:
  schedule:
    - cron: "0 4 * * *"  # 05:00 CET / 06:00 CEST
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update_epg:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: epg-update
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone iptv-org/epg
        run: |
          git clone --depth 1 https://github.com/iptv-org/epg.git

      - name: Set up Node.js (cache npm su epg/)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: epg/package-lock.json

      - name: Install grabber deps
        working-directory: ./epg
        run: npm ci --no-audit --no-fund

      - name: Grab EPGs (robust + logs)
        shell: bash
        run: |
          set -euo pipefail

          # pulizia log/errori precedenti (facoltativo ma utile)
          rm -rf epg/errors epg/logs || true

          run_grab() {
            local CHANNELS_FILE="$1"
            local OUTPUT_FILE="$2"

            echo ">> Launching grab for $CHANNELS_FILE -> $OUTPUT_FILE"

            pushd epg >/dev/null
            # uso tsx diretto per evitare stranezze di parsing (es. maxConnections: NaN)
            npx tsx scripts/commands/epg/grab.ts \
              --channels="${GITHUB_WORKSPACE}/${CHANNELS_FILE}" \
              --days=7 \
              --maxConnections=16 \
              --timeout=30000 \
              --output="${GITHUB_WORKSPACE}/${OUTPUT_FILE}" \
              2>&1 | tee "${GITHUB_WORKSPACE}/grab_${OUTPUT_FILE%.xml}.log"
            popd >/dev/null

            if [[ ! -s "${OUTPUT_FILE}" ]]; then
              echo "‚ùå ${OUTPUT_FILE} √® vuoto."
              echo "---- epg/errors ----"; ls -lah epg/errors || true; tail -n +1 epg/errors/* || true
              echo "---- Log (${OUTPUT_FILE}) ----"; tail -n 200 "grab_${OUTPUT_FILE%.xml}.log" || true
              exit 1
            fi

            echo "---- EPG SUMMARY (${OUTPUT_FILE}) ----"
            channels_count=$(grep -c "<channel" "${OUTPUT_FILE}" || true)
            progs_count=$(grep -c "<programme " "${OUTPUT_FILE}" || true)
            echo "Channels: $channels_count"
            echo "Programmes: $progs_count"
            ls -lh "${OUTPUT_FILE}"

            if (( channels_count > 0 && progs_count == 0 )); then
              echo "‚ùå Canali caricati ma 0 programmes in ${OUTPUT_FILE}."
              echo "---- epg/errors ----"; ls -lah epg/errors || true; tail -n +1 epg/errors/* || true
              echo "---- Log (${OUTPUT_FILE}) ----"; tail -n 200 "grab_${OUTPUT_FILE%.xml}.log" || true
              exit 1
            fi
          }

          # DEBUG: esegui serialmente per vedere bene i log
          run_grab channels.xml epg.xml
          run_grab d_channels.xml d_epg.xml


      - name: Commit changes if needed
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          shopt -s nullglob
          files=(epg.xml *_epg.xml)
          to_add=()
          for f in "${files[@]}"; do
            [[ -e "$f" ]] && to_add+=("$f")
          done

          if ((${#to_add[@]})); then
            git add "${to_add[@]}"
          fi

          if ! git diff --cached --quiet; then
            git commit -m "EPG Updated! üì∫"
            git push
          else
            echo "No EPG changes to commit."
          fi