name: Update EPG

on:
  schedule:
    - cron: "0 4 * * *"  # 05:00 CET / 06:00 CEST
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update_epg:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: epg-update
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone iptv-org/epg (hotfix branch)
        run: |
          git clone --depth 1 --branch patch-2025.10.2 https://github.com/iptv-org/epg.git
          cd epg
          git rev-parse --abbrev-ref HEAD
          git rev-parse --short HEAD

      - name: Set up Node.js (cache npm su epg/)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: epg/package-lock.json

      - name: Install grabber deps
        working-directory: ./epg
        run: npm ci --no-audit --no-fund

      - name: Grab all EPGs in parallel
        env:
          CHANNEL_OUTPUT_PAIRS: "channels.xml:epg.xml d_channels.xml:d_epg.xml"
        shell: bash
        run: |
          set -e
          echo "Pairs: $CHANNEL_OUTPUT_PAIRS"

          pids=()
          names=()

          for pair in $CHANNEL_OUTPUT_PAIRS; do
            CHANNELS_FILE="${pair%%:*}"
            OUTPUT_FILE="${pair##*:}"

            echo ">> Launching grab for $CHANNELS_FILE -> $OUTPUT_FILE"

            (
              pushd epg >/dev/null
              npm run grab -- \
                --channels="${GITHUB_WORKSPACE}/${CHANNELS_FILE}" \
                --days=7 \
                --maxConnections=16 \
                --timeout=15000 \
                --output="${GITHUB_WORKSPACE}/${OUTPUT_FILE}"
              popd >/dev/null

              if [ -f "${OUTPUT_FILE}" ]; then
                echo "---- EPG SUMMARY (${OUTPUT_FILE}) ----"
                channels_count=$(grep -c "<channel" "${OUTPUT_FILE}" || true)
                progs_count=$(grep -c "<programme " "${OUTPUT_FILE}" || true)
                echo "Channels: $channels_count"
                echo "Programmes: $progs_count"
                ls -lh "${OUTPUT_FILE}"
              else
                echo "No ${OUTPUT_FILE} produced."
                exit 1
              fi
            ) &

            pids+=($!)
            names+=("${OUTPUT_FILE}")
          done

          fail=0
          for i in "${!pids[@]}"; do
            pid=${pids[$i]}
            name=${names[$i]}
            if wait "$pid"; then
              echo "âœ” Completed: ${name}"
            else
              echo "âœ– Failed: ${name}"
              fail=1
            fi
          done

          exit $fail

      - name: Auto-split epgshare01.online (2 days) and merge
        shell: bash
        run: |
          set -euo pipefail

          # 1) Estrai al volo i canali epgshare01.online
          tmp_ch="epgshare_tmp_channels.xml"
          {
            echo '<?xml version="1.0" encoding="UTF-8"?>'
            echo '<channels>'
            awk '/<channel/ && /site="epgshare01.online"/ { print $0 }' channels.xml
            echo '</channels>'
          } > "$tmp_ch"

          # Se non ci sono canali epgshare, esci pulito
          if ! grep -q '<channel' "$tmp_ch"; then
            echo "Nessun canale epgshare01.online trovato: skip."
            exit 0
          fi

          # 2) Grab epgshare con meno giorni (evita payload troppo grandi)
          tmp_epg="epgshare_tmp_epg.xml"
          pushd epg >/dev/null
          npm run grab -- \
            --channels="${GITHUB_WORKSPACE}/${tmp_ch}" \
            --days=2 \
            --maxConnections=8 \
            --timeout=20000 \
            --output="${GITHUB_WORKSPACE}/${tmp_epg}"
          popd >/dev/null

          echo "---- EPG SUMMARY (${tmp_epg}) ----"
          grep -c "<channel" "${tmp_epg}" || true
          grep -c "<programme " "${tmp_epg}" || true
          ls -lh "${tmp_epg}"

          # 3) Merge dentro epg.xml
          pushd epg >/dev/null
          npx tsx scripts/commands/epg/merge.ts \
            --output "${GITHUB_WORKSPACE}/epg_merged.xml" \
            "${GITHUB_WORKSPACE}/epg.xml" \
            "${GITHUB_WORKSPACE}/${tmp_epg}"
          popd >/dev/null

          mv -f epg_merged.xml epg.xml

          # 4) Pulizia temp
          rm -f "$tmp_ch" "$tmp_epg"

      - name: Commit changes if needed
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          shopt -s nullglob
          files=(epg.xml *_epg.xml)
          to_add=()
          for f in "${files[@]}"; do
            [[ -e "$f" ]] && to_add+=("$f")
          done

          if ((${#to_add[@]})); then
            git add "${to_add[@]}"
          fi

          if ! git diff --cached --quiet; then
            git commit -m "EPG Updated! ðŸ“º"
            git push
          else
            echo "No EPG changes to commit."
          fi