name: Update EPG

on:
  schedule:
    - cron: "0 4 * * *"  # 05:00 CET / 06:00 CEST
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update_epg:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: epg-update
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone iptv-org/epg (hotfix branch)
        run: |
          git clone --depth 1 --branch patch-2025.10.2 https://github.com/iptv-org/epg.git
          cd epg
          git rev-parse --abbrev-ref HEAD
          git rev-parse --short HEAD

      - name: Set up Node.js (cache npm su epg/)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: epg/package-lock.json

      - name: Install grabber deps
        working-directory: ./epg
        run: npm ci --no-audit --no-fund

      - name: Grab all EPGs in parallel
        env:
          CHANNEL_OUTPUT_PAIRS: "channels.xml:epg.xml d_channels.xml:d_epg.xml"
        shell: bash
        run: |
          set -e
          echo "Pairs: $CHANNEL_OUTPUT_PAIRS"

          pids=()
          names=()

          for pair in $CHANNEL_OUTPUT_PAIRS; do
            CHANNELS_FILE="${pair%%:*}"
            OUTPUT_FILE="${pair##*:}"

            echo ">> Launching grab for $CHANNELS_FILE -> $OUTPUT_FILE"

            (
              pushd epg >/dev/null
              npm run grab -- \
                --channels="${GITHUB_WORKSPACE}/${CHANNELS_FILE}" \
                --days=7 \
                --maxConnections=16 \
                --timeout=15000 \
                --output="${GITHUB_WORKSPACE}/${OUTPUT_FILE}"
              popd >/dev/null

              if [ -f "${OUTPUT_FILE}" ]; then
                echo "---- EPG SUMMARY (${OUTPUT_FILE}) ----"
                grep -c "<channel" "${OUTPUT_FILE}" || true
                grep -c "<programme " "${OUTPUT_FILE}" || true
                ls -lh "${OUTPUT_FILE}"
              else
                echo "No ${OUTPUT_FILE} produced."
                exit 1
              fi
            ) &

            pids+=($!)
            names+=("${OUTPUT_FILE}")
          done

          fail=0
          for i in "${!pids[@]}"; do
            pid=${pids[$i]}
            name=${names[$i]}
            if wait "$pid"; then
              echo "‚úî Completed: ${name}"
            else
              echo "‚úñ Failed: ${name}"
              fail=1
            fi
          done

          exit $fail

      - name: Inject only 4 US locals (WABC/WNBC/WCBS/WNYW) into epg.xml
        shell: bash
        run: |
          set -euo pipefail

          echo ">> Fetching US locals feed..."
          curl -fsSL "https://epgshare01.online/epgshare01/epg_ripper_US_LOCALS1.xml.gz" -o /tmp/us_locals1.xml.gz
          gzip -dc /tmp/us_locals1.xml.gz > /tmp/us_locals1.xml

          # Scrivi lo script Python evitando heredoc (per non triggerare il linter YAML)
          PY=/tmp/us_locals_merge.py
          : > "$PY"
          printf '%s\n' \
            'import sys, xml.etree.ElementTree as ET' \
            'from xml.etree.ElementTree import Element' \
            'BASE = "epg.xml"; SRC = "/tmp/us_locals1.xml"; OUT = "epg.xml"' \
            'MAP = {' \
            '  "wabc":"WABC-DT.us_locals1",' \
            '  "wnbc":"WNBC-DT.us_locals1",' \
            '  "wcbs":"WCBS-DT.us_locals1",' \
            '  "wnyw":"WNYW-DT.us_locals1",' \
            '}' \
            'FEED2TARGET = {v:k for k,v in MAP.items()}' \
            'b = ET.parse(BASE); r = b.getroot()' \
            'if r.tag != "tv": print("Root base non √® <tv>", file=sys.stderr)' \
            '# set dei programmi gi√† presenti (id target)' \
            'pkeys = {(p.get("channel"), p.get("start"), p.get("stop")) for p in r.findall("programme")}' \
            'added = 0; seen = 0' \
            'for _, e in ET.iterparse(SRC, events=("end",)):' \
            '    if e.tag != "programme":' \
            '        e.clear(); continue' \
            '    ch = e.get("channel")' \
            '    if ch not in FEED2TARGET:' \
            '        e.clear(); continue' \
            '    target_id = FEED2TARGET[ch]  # es. "wabc"' \
            '    key = (target_id, e.get("start"), e.get("stop"))' \
            '    seen += 1' \
            '    if key in pkeys:' \
            '        e.clear(); continue' \
            '    # clona il programme e riscrivi l\'id canale sul target (wabc/w ...)' \
            '    new = ET.fromstring(ET.tostring(e, encoding="utf-8"))' \
            '    new.set("channel", target_id)' \
            '    r.append(new)' \
            '    pkeys.add(key)' \
            '    added += 1' \
            '    e.clear()' \
            'b.write(OUT, encoding="utf-8", xml_declaration=True)' \
            'print(f"Programmi feed considerati: {seen}")' \
            'print(f"Programmi US locals aggiunti: {added}")'

          python3 "$PY"

          echo "---- EPG SUMMARY (epg.xml after US locals merge) ----"
          grep -c "<programme " epg.xml || true
          ls -lh epg.xml

      - name: Commit changes if needed
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          shopt -s nullglob
          files=(epg.xml *_epg.xml)
          to_add=()
          for f in "${files[@]}"; do [[ -e "$f" ]] && to_add+=("$f"); done

          if ((${#to_add[@]})); then git add "${to_add[@]}"; fi

          if ! git diff --cached --quiet; then
            git commit -m "EPG Updated! üì∫"
            git push
          else
            echo "No EPG changes to commit."
          fi