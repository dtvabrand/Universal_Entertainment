name: Update EPG

on:
  schedule:
    - cron: "0 4 * * *"  # 05:00 CET / 06:00 CEST
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update_epg:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: epg-update
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone iptv-org/epg
        run: |
          git clone --depth 1 https://github.com/iptv-org/epg.git

      - name: Set up Node.js (cache npm su epg/)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: epg/package-lock.json

      - name: Install grabber deps
        working-directory: ./epg
        run: npm ci --no-audit --no-fund

      - name: Grab EPGs per-site (diagnostic + merge)
        shell: bash
        run: |
          set -euo pipefail

          mkdir -p tmp_epg
          rm -f tmp_epg/*.xml epg.xml || true

          # Estrai i siti unici dal tuo channels.xml
          mapfile -t SITES < <(awk -F'site="' '/<channel/{split($2,a,"\""); print a[1]}' channels.xml | sort -u)

          echo "Siti trovati in channels.xml:"
          printf ' - %s\n' "${SITES[@]}"

          success_files=()

          run_site() {
            local site="$1"
            local site_safe="${site//[^A-Za-z0-9._-]/_}"  # filename-safe
            local chfile="tmp_epg/${site_safe}_channels.xml"
            local outfile="tmp_epg/${site_safe}_epg.xml"

            # Crea un sotto-channels.xml solo per quel site
            {
              echo '<?xml version="1.0" encoding="UTF-8"?>'
              echo '<channels>'
              # prendi solo le righe con site="..."
              # Attenzione: preserva l'indentazione/righe come sono
              awk -v s="$site" '/<channel/{if($0 ~ "site=\"" s "\"") print $0}' channels.xml
              echo '</channels>'
            } > "$chfile"

            echo ""
            echo ">> [$site] grabbing -> $outfile"
            pushd epg >/dev/null
            npx tsx scripts/commands/epg/grab.ts \
              --channels="${GITHUB_WORKSPACE}/${chfile}" \
              --days=7 \
              --maxConnections=16 \
              --timeout=30000 \
              --output="${GITHUB_WORKSPACE}/${outfile}" || true
            popd >/dev/null

            if [[ -s "$outfile" ]]; then
              ch_cnt=$(grep -c "<channel" "$outfile" || true)
              pr_cnt=$(grep -c "<programme " "$outfile" || true)
              echo "   ✓ [$site] Channels: $ch_cnt | Programmes: $pr_cnt"
              if (( pr_cnt > 0 )); then
                success_files+=("$outfile")
              else
                echo "   ⚠ [$site] 0 programmes: escludo dal merge."
              fi
            else
              echo "   ✖ [$site] output vuoto: escludo dal merge."
            fi
          }

          # Esegui per ogni site
          for s in "${SITES[@]}"; do
            run_site "$s"
          done

          echo ""
          echo "File con programmes > 0 da unire: ${#success_files[@]}"
          if ((${#success_files[@]} == 0)); then
            echo "❌ Nessun site ha prodotto programmes. epg.xml non verrà creato."
            exit 1
          fi

          # Merge in un unico epg.xml
          pushd epg >/dev/null
          npx tsx scripts/commands/epg/merge.ts \
            --output "${GITHUB_WORKSPACE}/epg.xml" \
            "${success_files[@]}"
          popd >/dev/null

          echo "---- EPG SUMMARY (epg.xml) ----"
          ch_all=$(grep -c "<channel" epg.xml || true)
          pr_all=$(grep -c "<programme " epg.xml || true)
          echo "Channels: $ch_all"
          echo "Programmes: $pr_all"
          ls -lh epg.xml


      - name: Commit changes if needed
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          shopt -s nullglob
          files=(epg.xml *_epg.xml)
          to_add=()
          for f in "${files[@]}"; do
            [[ -e "$f" ]] && to_add+=("$f")
          done

          if ((${#to_add[@]})); then
            git add "${to_add[@]}"
          fi

          if ! git diff --cached --quiet; then
            git commit -m "EPG Updated! 📺"
            git push
          else
            echo "No EPG changes to commit."
          fi